#pragma once
#include "SimpleMath.h"

#define SINGLE(className) public: \
						static className* GetInst() \
						{\
							static className mgr;\
							return &mgr;\
						}\
						private:\
							className##();\
							~className##();

#define DT CTimeMgr::GetInst()->DeltaTime()

#define CLONE(type) virtual type* Clone(){return new type(*this);}
#define CLONE_DISABLE(type) virtual type* Clone(){assert(nullptr); return nullptr;}

#define RET_SUCCESS 1
#define RET_FAILED  -1

#define SAFE_DELETE(p) if(NULL != p){ delete p; p = NULL;}
#define SAFE_RELEASE(p) if(NULL != p){p->Release(); p = NULL;}

#define DEVICE CDevice::GetInst()->GetDevice()
#define CONTEXT CDevice::GetInst()->GetContext()


#define KEY(type, state) CKeyMgr::GetInst()->GetKeyState(type, state)
#define KEYHOLD(type) CKeyMgr::GetInst()->GetKeyState(type, KEY_STATE::HOLD)
#define KEYAWAY(type) CKeyMgr::GetInst()->GetKeyState(type, KEY_STATE::AWAY)
#define KEYTAB(type) CKeyMgr::GetInst()->GetKeyState(type, KEY_STATE::TAB)

#define MAX_LAYER 32

#define	PI 3.14159265358979f

#define _RADIAN 57.2957795130823f
#define _DEGREE 0.01745329251994f

#define DISABLE_POS Vec3(10000.f, 10000.f, 0.f)

#define INSTINCT_OF_TIME 6
#define DEATHFAULT_OF_TIME 7
#define ALPHAPHASE1_HIT_OF_TIME 6
#define BETAPHASE1_HIT_OF_TIME 5
#define ALPHAPHASE2_HIT_OF_TIME 15
#define BETAPHASE2_HIT_OF_TIME 12
#define RAGINGBLOW_PHASE_OF_TIME 5
#define SHOUT_HIT_OF_TIME 6
#define SOUL_ECLIPSE_PHASE1_OF_TIME 7
#define SOUL_ECLIPSE_PHASE2_OF_TIME 15

#define PlayerSpeed 275.f

typedef DirectX::SimpleMath::Vector2 Vec2;
typedef DirectX::SimpleMath::Vector3 Vec3;
typedef DirectX::SimpleMath::Vector4 Vec4;

using namespace DirectX::SimpleMath;

enum class SKILL_TYPE
{
	NONE,
	COMBO_DEATH_FAULT_HIT,
	COMBO_DEATH_FAULT_SPECIAL_0,
	COMBO_DEATH_FAULT_SPECIAL_1,
	COMBO_DEATH_FAULT_SPECIAL_2,
	COMBO_DEATH_FAULT_SPECIAL_3,
	COMBO_INSTINCT,
	ALPHAPHASE_HIT,
	BETAPHASE_HIT,
	RAGINGBLOW_PHASE1,
	RAGINGBLOW_PHASE2,
	SHOUT_HIT,
	SOUL_ECLIPSE_PHASE,

	GATEKEEPER_ATTACK,
	GIGANTICVIKING_ATTACK,	
	PHANTOMWATCH_ATTACK,

	PAPULATUS_BLUERING,
	PAPULATUS_REDRING,
	PAPULATUS_TORRENT_OF_TIME,

	PAPULATUS_TIME_BOMB,
	PAPULATUS_CRASH,
	PAPULATUS_CRACK_OF_TIME,

	PAPULATUS_LASER_OVER,

	PAPULATUS_THROW_GEAR,
	PAPULATUS_BLINK,

	PAPULATUS_OBJECT_60,
	PAPULATUS_OBJECT_61,

	END,
};

enum class INSTANT_DEATH
{
	NONE,
	SUMMON,
	AREAING,
	DIE,
	END,
};

enum class DIR_TYPE
{
	RIGHT,
	UP,
	FRONT,
	END,
};

enum class ATTACK_FSM
{
	NONE,
	ENABLE,
	END,
};

enum class FSM
{
	ALERT,
	BLINK,
	DEATH,
	JUMP,
	FLASHJUMP,
	LADDER,
	PRONE,
	ROPE,
	RUSH,
	STAND,
	STAND_FLASH,
	ATTACK,
	SHOUT,
	SHADOWFLASH_ALPHA,
	SHADOWFLASH_BETA,
	DEATHFAULT,
	WALK,
	BUFF,
	RAGINGBLOW,
	END,
};

enum class DEATHFAULT_FSM
{
	NONE,
	EFFECT,
	SCREEN,
	END,
};

enum class INSTINCT_FSM
{
	NONE,
	DISABLE,
	ENABLE,
	ATTACK,
	END,
};

enum class SHADOWFLASH_FSM
{
	NONE,
	ENABLE,
	PHASE1,
	PHASE1_FINISH,
	PHASE2,
	END,
};

enum class RAGINGBLOW_FSM
{
	NONE,
	PHASE1,
	PHASE2,
	ENRAGE_ACTIVE,
	END,
};

enum class COMBO_ATTACK
{
	DISABLE,
	PHASE1,
	PHASE2,
	END,
};

enum class ENRAGE
{
	DISABLE,
	ENABLE,
	END,
};

enum class COMBO_SUB
{
	DISABLE,
	PHASE1,
	PHASE2,
	END,
};

enum class INSIZING
{
	DISABLE,
	ENABLE,
	END,
};

enum class MAPLEWARRIOR
{
	DISABLE,
	ENABLE,
	END,
};

enum class BOOSTER
{
	DISABLE,
	ENABLE,
	END,
};

enum class SHOUT
{
	DISABLE,
	ENABLE,
	END,
};

enum class INSTALLATION_TYPE
{
	NONE,
	LEAP,
	END
};

enum class SOULECLIPSE_FSM
{
	NONE,
	MOONAPPEAR,
	MOONPHASE1,
	MOONPHASE2,
	EFFECT_IN,
	EFFECT_OUT,
	PARTICLE,
	PARTICLE_EXPLOTION,
	SUNSET,
	OUTLINE,
	END,
};

enum class DIR
{
	LEFT,
	RIGHT,
	END,
};

enum class PAPULATUS_PHASE1_PATTERN
{
	NONE,
	CRACK_OF_TIME,
	ATTACK_CRASH,
	ATTACK_OTHER,
	TIME_BOMBS,
	CURSE,
	ALRAM,
	SLEEP,
	END,
};

enum class PAPULATUS_PHASE2_PATTERN
{
	NONE,
	THROW_GEAR,
	SUMMON_ALTER_EGO,
	HEALING,
	BLINK,
	TORRENT_OF_TIME,
	ALARMMING,
	END,
};

enum class PAPULATUS_OBJECT
{
	NONE,
	ING_1START,
	ING_1,
	ING_2START,
	ING_2,
	END_1,
	END_2,
	END,
};

enum class PAPULATUS_FSM
{
	NONE,

	PHASE0_STAND,
	PHASE0_DIE,
	//
	PHASE_SEPARATOR1,
	//
	PHASE1_BLUERING, // BASIC
	PHASE1_REDRING,	//RED
	PHASE1_CURSE,
	PHASE1_TIME_BOMB, //
	PHASE1_CRASH, //KNOCK_BACK
	
	PHASE1_DIE,
	PHASE1_HIT,
	PHASE1_MOVE,
	PHASE1_STAND,
	PHASE1_TRACING,
	
	PHASE1_TOSLEEP,
	PHASE1_SLEEPING,
	PHASE1_WAKE_UP,

	PHASE1_ALARM_START,
	PHASE1_ALARM_ING,
	PHASE1_ALARM_END,

	PHASE1_CRACK_OF_TIME,
	//
	PHASE_SEPARATOR2,
	//
	PHASE2_STAND,
	PHASE2_DIE,
	PHASE2_THROW_GEAR,
	PHASE2_FLY,
	PHASE2_HIT,
	PHASE2_TRACING,

	PHASE2_SUMMON_ALTER_EGO,
	PHASE2_HEALLING,
	PHASE2_BLINK,
	PHASE2_TORRENT_OF_TIME,
	PHASE2_ALARM_START,
	PHASE2_ALARMING,
	PHASE2_ALARM_END,

	PHASE2_APPEAR_ALTER_EGO,
	PHASE2_FADEOUT,

	END,
};

enum class MONSTER_FSM
{
	NONE,
	ATTACK,
	ATTACK2,
	SKILL,
	SKILL2,
	HIT,
	DIE,
	MOVE,
	STAND,
	TRACING,
	REGENERATION,
	END,
};

enum class LASER_TYPE
{
	NONE,
	RED_LEFT,
	BLUE_RIGHT,
	END,
};

enum class LASER_FSM
{
	NONE,
	SUMMON,
	ACTIVE,
	DIE,
	OBSTRUCT,
	END,
};

enum class CRANE_FSM
{
	IDLE,
	HOLD,
	END,
};


enum class KEY_TYPE
{
	KEY_1 = 0,
	KEY_2,
	KEY_3,
	KEY_4,
	KEY_5,
	KEY_6,
	KEY_7,
	KEY_8,
	KEY_9,
	KEY_0,
	KEY_Q,
	KEY_W,
	KEY_E,
	KEY_R,
	KEY_T,
	KEY_Y,
	KEY_U,
	KEY_I,
	KEY_O,
	KEY_P,
	KEY_A,
	KEY_S,
	KEY_D,
	KEY_F,
	KEY_G,
	KEY_H,
	KEY_J,
	KEY_K,
	KEY_L,
	KEY_Z,
	KEY_X,
	KEY_C,
	KEY_V,
	KEY_B,
	KEY_N,
	KEY_M,
	KEY_F1,
	KEY_F2,
	KEY_F3,
	KEY_F4,
	KEY_F5,
	KEY_F6,
	KEY_F7,
	KEY_F8,
	KEY_F9,
	KEY_F10,
	KEY_F11,
	KEY_F12,

	KEY_CTRL,
	KEY_ALT,
	KEY_LSHIFT,
	KEY_RSHIFT,
	KEY_TAB,
	KEY_CAP,
	KEY_ENTER,
	KEY_ESC,
	KEY_SPACE,
	KEY_UP,
	KEY_DOWN,
	KEY_LEFT,
	KEY_RIGHT,

	KEY_NUM1,
	KEY_NUM2,
	KEY_NUM3,
	KEY_NUM4,
	KEY_NUM5,
	KEY_NUM6,
	KEY_NUM7,
	KEY_NUM8,
	KEY_NUM9,
	KEY_NUM0,

	KEY_LBTN,
	KEY_RBTN,

	END,
};

enum class CURSOR
{
	CLICKED,
	CLICK_IDLE,
	IDLE,
	IVENTORY_IDLE,
	SCROLL_IDLE,
	TAKEIT,
	END,
};

enum class KEY_STATE
{
	TAB,	// 최초 눌린 시점
	HOLD,   // 누르고 있는 중
	AWAY,   // 키를 막 뗀 시점
	NONE,   // 안눌림	
};


enum class COMPONENT_TYPE
{
	TRANSFORM,
	MESHRENDER,
	COLLIDER,
	CAMERA,
	ANIMATOR2D,
	ANIMATOR3D,
	END,
	SCRIPT,
};


enum class COLLIDER_TYPE
{
	COLLIDER_2D_BOX,
	COLLIDER_2D_CIRCLE,
	COLLIDER_3D_CUBE,
	COLLIDER_3D_SHPERE,
};

enum SHADER_TYPE
{
	ST_VERTEX = 0x01,
	ST_HULL = 0x02,
	ST_DOMAIN = 0x04,
	ST_GEOMETRY = 0x08,
	ST_COMPUTE = 0x10,
	ST_PIXEL = 0x20,
};

enum class RESOURCE_TYPE
{
	MESH,
	TEXTURE,
	MATERIAL,
	SOUND,
	PREFAB,
	END,
};

enum class BLEND_TYPE
{
	NONE,
	ALPHABLEND,
	ALPHA_TO_COVERAGE,
	EFFECT,
	END,
};

enum class DEPTH_STENCIL_TYPE
{
	LESS,
	LESS_EQUAL,
	END,
};

enum class SHADER_PARAM
{
	INT_0,
	INT_1,
	INT_2,
	INT_3,
	INT_END,

	FLOAT_0,
	FLOAT_1,
	FLOAT_2,
	FLOAT_3,
	FLOAT_END,

	VEC2_0,
	VEC2_1,
	VEC2_2,
	VEC2_3,
	VEC2_END,

	VEC4_0,
	VEC4_1,
	VEC4_2,
	VEC4_3,
	VEC4_END,

	TEX_0,
	TEX_1,
	TEX_2,
	TEX_3,
	TEX_4,
	TEX_5,
	TEX_6,
	TEX_7,
	TEX_END,

	END,
};

enum class EVENT_TYPE
{
	ADD_CHILD,
	DISCONNECT_PARENT,
	DELETE_OBJECT,
	CREATE_OBJECT,
	CHANGE_RESOLUTION, // 카메라 컴포넌트
	END,
};


// 시계방향 -> 전면(front)
// 반시계 방향 -> 후면(back)
enum class RASTERIZER_TYPE
{
	CULL_BACK,
	CULL_FRONT,
	CULL_NONE,
	WIREFRAME,
	END,
};
